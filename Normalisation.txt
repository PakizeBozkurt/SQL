Normalization is a database design technique used to minimize data redundancy and dependency in a relational database. The goal of normalization is to ensure that each piece of data is stored in only one place, so that changes made to the data in one table do not affect other tables.

In SQL, normalization is usually achieved through the use of table relationships and referential integrity constraints. There are several levels of normalization, each with a set of rules, known as normal forms, that dictate the structure of the data in the database. The most commonly used normal forms are:

First Normal Form (1NF): Each column in a table must contain only atomic values, and each row must be unique.

Second Normal Form (2NF): A table is in 2NF if it is in 1NF and every non-key column is dependent on the entire primary key.

Third Normal Form (3NF): A table is in 3NF if it is in 2NF and there are no transitive dependencies between non-key columns.

By normalizing a database, you can improve data quality, data integrity, and data management, and make it easier to maintain and modify the database over time.

A simple example of how normalization can be used in a relational database:

Consider a table for storing information about students and the courses they are enrolled in:

Student_ID | Name | Course | Grade
------------------------------------
1         | John | Math   | A
2         | Jane | History| B
3         | Jack | Math   | C
4         | Jill | Science| A

This table violates the first normal form (1NF) because it has repeating groups (courses and grades) in the same table. To normalize this table to 1NF, we would create separate tables for the courses and grades:

Courses
---------
Course_ID | Course_Name
-----------------------
1         | Math
2         | History
3         | Science

Grades
-------
Grade_ID | Student_ID | Course_ID | Grade
-----------------------------------------
1        | 1         | 1        | A
2        | 2         | 2        | B
3        | 3         | 1        | C
4        | 4         | 3        | A

Students
---------
Student_ID | Name
--------------------
1         | John
2         | Jane
3         | Jack
4         | Jill

In this design, the tables are in first normal form. Each table contains only atomic values (single values, rather than groups of values) and each row in each table is unique.

To further normalize this database to second normal form (2NF), we would ensure that each non-key column (Name in the Students table and Course_Name in the Courses table) is dependent on the entire primary key of its respective table. In this case, the primary keys are Student_ID in the Students table and Course_ID in the Courses table.

By normalizing the data in this way, we have reduced data redundancy and improved data integrity. For example, if we needed to update the name of a course, we could do so in one place (in the Courses table), rather than having to make the same change in multiple places throughout the database.

An availability table for trainees:

CREATE TABLE Availability (
  Availability_ID INT PRIMARY KEY AUTO_INCREMENT,
  Trainee_ID INT NOT NULL,
  Day_of_Week VARCHAR(10) NOT NULL,
  Start_Time TIME NOT NULL,
  End_Time TIME NOT NULL,
  FOREIGN KEY (Trainee_ID) REFERENCES Trainees(Trainee_ID)
);

In this example, we create a table called Availability with five columns:

Availability_ID: A unique identifier for each availability record.
Trainee_ID: The ID of the trainee who is available.
Day_of_Week: The day of the week the trainee is available (e.g., Monday, Tuesday, etc.).
Start_Time: The start time of the trainee's availability.
End_Time: The end time of the trainee's availability.
We also specify a foreign key constraint on the Trainee_ID column, which ensures that each availability record is associated with a valid trainee in the Trainees table.

You can then insert data into the Availability table to represent the available times for each trainee.